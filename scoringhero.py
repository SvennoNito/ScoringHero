# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'qtdesigner_test.ui'
#
# Created by: PyQt5 UI code generator 5.15.9
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

from PyQt5 import QtCore, QtWidgets
from PyQt5.QtWidgets import *
from PyQt5.QtCore import *
import scipy.io, os, sys, json
sys.path.append("ui_classes")
from EEG_class import *
from scaleDialogeBox import *
from greenLine import *
from hypnogram import *
from spectogram import *
from areapower import *
from annotationBox import *


class Ui_MainWindow(QMainWindow):
    def __init__(self):
        super().__init__()
        self.devmode            = 1
        self.epolen             = 30
        self.this_epoch         = 1
        self.this_stage         = '-'
        self.EEG                = []
        self.scoringFile        = []
        self.greenLine          = []
        self.scaleDialogeBox    = []
        self.annotationBox      = annotationBox()

        """ self.editfield = QtWidgets.QLineEdit()
        self.editfield.setFixedWidth(150)        
        self.editfield.setText("Default Text")
        self.editfield.returnPressed.connect(self.handleLineEdit)  
        self.editfieldAction = self.editfield.addAction(QLineEdit.TrailingPosition) 
        self.editfieldAction.triggered.connect(self.handleLineEdit)
        self.menuBar().addAction(self.editfieldAction) """           

    def handleLineEdit(self):
        text = self.editfield.text()

    def keyPressEvent(self, event):
        print(event.key())
        if event.key() == Qt.Key_Right:
            self.nextEpoch()     
        if event.key() == Qt.Key_Left:
            self.previousEpoch()      

    def loadWork(self):
        scoring_file, _  = QtWidgets.QFileDialog.getOpenFileName(None, 'Open .txt file', r'C:\PhDScripts\Sides\ScoringHero', '*.txt')
        scoring_filename, scoring_extension = os.path.splitext(scoring_file)
        self.scoringFile = scoring_file
        if scoring_extension == '.txt':
            with open(scoring_file, 'r') as file:
                lines = file.readlines()                  
                for line in lines: # Read the last word of each row until an empty row is encountered
                    line    = line.strip()  # Remove leading/trailing whitespace
                    words   = line.split()
                    if words[0] == 'Epoch':
                        stageinfo       = line.split()
                        stageinfo[1]    = stageinfo[1].replace(":", "")
                        self.hypnogram.assign_stage(int(stageinfo[1]), stageinfo[2])   
                    elif  words[0] == 'Artifact':                           
                        start = float(line.split()[-3])/self.EEG.timesby
                        stop = float(line.split()[-1])/self.EEG.timesby
                        self.EEG.addArtefact(start, stop)
            
        self.updateStageDisplay()
        self.EEG.showArtefacts()
          
    def labelArtefact(self):
        self.EEG.storeArtefacts(self.greenLine)  
        self.quickSaveSleepStages()

    def removeArtefact(self):
        self.EEG.removeArtefacts()                        

    def saveSleepStages(self):
        filename, _         = QFileDialog.getSaveFileName(None, "Save Sleep Stages", "", "Text Files (*.txt)") # Open a file dialog to choose the save location and filename
        self.scoringFile    = filename
        self.quickSaveSleepStages()

    def quickSaveSleepStages(self): # Write the sleep stages to the text file
        filename = self.scoringFile
        if len(filename) > 0:
            with open(filename, 'w') as file:
                for epoch, stage in self.hypnogram.stages.items():
                    file.write(f"Epoch {epoch}: {stage[0]} {stage[1]}\n") # Write the sleep stages to the text file
                for count, period in enumerate(self.EEG.artefacts):
                    file.write(f"Artifact {count+1} (in s): {round(period[0]*self.EEG.timesby, 3)} to {round(period[1]*self.EEG.timesby, 3)}\n") # artefacts

    def resetGreenLine(self):
        if self.greenLine:
            self.greenLine.reset()       
        
    def updateStageDisplay(self):
        this_stage = self.hypnogram.stages[self.this_epoch][0]
        this_epoch = self.this_epoch
        self.EEG.update_text(this_epoch, this_stage)
        self.spectogram.add_line(this_epoch)
        self.hypnogram.update(this_epoch)
        self.quickSaveSleepStages()
        self.resetGreenLine()          # Removes the greenLine widget


   

    def scoreN1(self):     
        self.hypnogram.stages[self.this_epoch] = ['N1', -1]  
        self.updateStageDisplay()   
        self.nextEpoch()

    def scoreN2(self):     
        self.hypnogram.stages[self.this_epoch] = ['N2', -2]  
        self.updateStageDisplay() 
        self.nextEpoch()

    def scoreN3(self):     
        self.hypnogram.stages[self.this_epoch] = ['N3', -3]  
        self.updateStageDisplay() 
        self.nextEpoch()

    def scoreWake(self):     
        self.hypnogram.stages[self.this_epoch] = ['Wake', 1]  
        self.updateStageDisplay() 
        self.nextEpoch()

    def scoreREM(self):     
        self.hypnogram.stages[self.this_epoch] = ['REM', 0]  
        self.updateStageDisplay()        
        self.nextEpoch()       

    def hypnoClick(self, event):
        self.this_epoch = self.hypnogram.onclick(event)
        self.EEG.showEEG(self.this_epoch)
        self.updateStageDisplay()

    def spectogramClick(self, event):
        self.this_epoch = self.spectogram.map(event)
        self.EEG.showEEG(self.this_epoch)
        self.updateStageDisplay()            

    def previousEpoch(self):
        if self.this_epoch > 1:
            self.this_epoch -= 1
            self.EEG.showEEG(self.this_epoch) # Plot previous epoch   
            self.updateStageDisplay() 

    def nextEpoch(self):
        if self.this_epoch < self.EEG.numepo:
            self.this_epoch += 1       
            self.EEG.showEEG(self.this_epoch) # Plot next epoch
            self.updateStageDisplay() 

    def scaleChannels(self):
        self.scaleDialogeBox = scaleDialogeBox(self.EEG.chaninfo)
        self.scaleDialogeBox.changesMade.connect(self.respond_to_scaleDialogeBox)
        self.scaleDialogeBox.exec_()

    def respond_to_scaleDialogeBox(self):
        self.EEG.scaleChannels(self.scaleDialogeBox.chaninfo, self.this_epoch) 

    def define_annotations(self):
        self.annotationBox.exec_()

    def openEEGFile(self):
        # Function to call when loading the EEG file.
        scriptpath  = os.path.dirname(os.path.abspath(__file__))
        EEG_file, _ = QtWidgets.QFileDialog.getOpenFileName(None, 'Open File', scriptpath, '*.mat')
        EEG_filename, EEG_extension = os.path.splitext(EEG_file)
        if EEG_extension == '.mat':
            self.EEG.data  = scipy.io.loadmat(EEG_file)['EEG']['data'][0][0]
            self.EEG.srate = scipy.io.loadmat(EEG_file)['EEG']['srate'][0][0][0][0] 
        self.scoringFile = f'{EEG_filename}.txt'
        self.open_config(EEG_filename)
        self.initiate()

    def open_config(self, filename):
        with open(f"{filename}.json", "r") as file:
            config = json.load(file)      
            self.EEG.add_info(config[0])
            self.EEG.add_chaninfo(config[1])        

    def initiate(self):
        self.EEG.update(self.epolen)
        self.EEG.showEEG(self.this_epoch)
        self.hypnogram.initiate(self.EEG)
        self.spectogram.initiate(self.EEG)
        self.spectogram.add_line(self.this_epoch)
        self.EEG.update_text(self.this_epoch, self.this_stage)
        #self.epochpower.initiate(self.EEG)
        #self.epochpower.update(self.this_epoch)
        self.areapower.initiate(self.EEG)
        self.greenLine.initiate(self.EEG)


    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(800, 600)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        MainWindow.showMaximized()

        # set the grid layout
        layout = QtWidgets.QGridLayout()
        self.centralwidget.setLayout(layout) 

        # Create classes
        self.EEG        = EEG_class(self.centralwidget)
        self.hypnogram  = hypnogram(self.centralwidget)
        self.spectogram = spectogram(self.centralwidget)
        #self.epochpower = epochpower(self.centralwidget)
        self.areapower  = areapower(self.centralwidget)
        self.greenLine  = greenLine(self.areapower)
        self.hypnogram.axes.scene().sigMouseClicked.connect(self.hypnoClick)
        self.spectogram.graphics.scene().sigMouseClicked.connect(self.spectogramClick)

        # Layout
        layout.addWidget(self.EEG.axes,                 10, 0,  85,  100)
        layout.addWidget(self.greenLine,                10, 0,  85,  100)     
        layout.addWidget(self.spectogram.graphics,      0,  0,  10,  70)
        layout.addWidget(self.hypnogram.axes,           0, 85,  10,  15)
        layout.addWidget(self.areapower.axes,           0, 70,  10,  15)
        #layout.addWidget(self.epochpower.axes,          95, 0,  5, 100)

   




        # Menubar
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 800, 22))
        self.menubar.setObjectName("menubar")

        self.menuFile = QtWidgets.QMenu(self.menubar)
        self.menuFile.setObjectName("menuFile")
        self.menuHelp = QtWidgets.QMenu(self.menubar)
        self.menuHelp.setObjectName("menuHelp")
        self.menuEdit = QtWidgets.QMenu(self.menubar)
        self.menuEdit.setObjectName("menuEdit")
        self.menuView = QtWidgets.QMenu(self.menubar)
        self.menuView.setObjectName("menuView")
        self.menuStages = QtWidgets.QMenu(self.menubar)
        self.menuStages.setObjectName("menuStages")
        self.menuActions = QtWidgets.QMenu(self.menubar)
        self.menuActions.setObjectName("menuActions")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        self.actionOpen = QtWidgets.QAction(MainWindow)
        self.actionOpen.setObjectName("actionOpen")
        self.actionLoadWork = QtWidgets.QAction(MainWindow)
        self.actionLoadWork.setObjectName("actionLoadWork")
        self.actionSave = QtWidgets.QAction(MainWindow)
        self.actionSave.setObjectName("actionSave")
        self.actionChannels = QtWidgets.QAction(MainWindow)
        self.actionChannels.setObjectName("actionChannels")
        self.actionAnnotations = QtWidgets.QAction(MainWindow)
        self.actionAnnotations.setObjectName("actionAnnotations")
        self.actionAbout = QtWidgets.QAction(MainWindow)
        self.actionAbout.setObjectName("actionAbout")
        self.actionHypnogram = QtWidgets.QAction(MainWindow)
        self.actionHypnogram.setObjectName("actionHypnogram")
        self.actionSpectogram = QtWidgets.QAction(MainWindow)
        self.actionSpectogram.setObjectName("actionSpectogram")
        self.actionN1 = QtWidgets.QAction(MainWindow)
        self.actionN1.setObjectName("actionN1")
        self.actionN2 = QtWidgets.QAction(MainWindow)
        self.actionN2.setObjectName("actionN2")
        self.actionN3 = QtWidgets.QAction(MainWindow)
        self.actionN3.setObjectName("actionN3")
        self.actionWake = QtWidgets.QAction(MainWindow)
        self.actionWake.setObjectName("actionWake")
        self.actionREM = QtWidgets.QAction(MainWindow)
        self.actionREM.setObjectName("actionREM")
        self.actionLabelArtefacts = QtWidgets.QAction(MainWindow)
        self.actionLabelArtefacts.setObjectName("actionLabelArtefacts")
        #self.actionRemoveArtefacts = QtWidgets.QAction(MainWindow)
        #self.actionRemoveArtefacts.setObjectName("actionRemoveArtefacts")

        self.menuFile.addAction(self.actionOpen)
        self.menuFile.addAction(self.actionLoadWork)
        self.menuFile.addAction(self.actionSave)
        self.menuHelp.addAction(self.actionAbout)
        self.menuEdit.addAction(self.actionChannels)
        self.menuEdit.addAction(self.actionAnnotations)
        self.menuEdit.addSeparator()
        self.menuView.addAction(self.actionHypnogram)
        self.menuView.addAction(self.actionSpectogram)
        self.menuView.addSeparator()
        self.menuStages.addAction(self.actionWake)
        self.menuStages.addAction(self.actionN1)
        self.menuStages.addAction(self.actionN2)
        self.menuStages.addAction(self.actionN3)
        self.menuStages.addAction(self.actionREM)
        self.menuStages.addAction(self.actionLabelArtefacts)
        #self.menuActions.addAction(self.actionRemoveArtefacts)

        self.menubar.addAction(self.menuFile.menuAction())
        self.menubar.addAction(self.menuEdit.menuAction())
        self.menubar.addAction(self.menuStages.menuAction())
        self.menubar.addAction(self.menuView.menuAction())
        self.menubar.addAction(self.menuHelp.menuAction())
        self.menubar.addAction(self.menuActions.menuAction())

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

        self.actionOpen.triggered.connect(lambda: self.openEEGFile())
        self.actionLoadWork.triggered.connect(lambda: self.loadWork())
        self.actionSave.triggered.connect(lambda: self.saveSleepStages())
        self.actionChannels.triggered.connect(lambda: self.scaleChannels())
        self.actionAnnotations.triggered.connect(lambda: self.define_annotations())
        self.actionAbout.triggered.connect(lambda: self.aboutDialog())
        self.actionHypnogram.triggered.connect(lambda: self.showHypnogram())
        self.actionSpectogram.triggered.connect(lambda: self.showSpectogram())
        self.actionN1.triggered.connect(lambda: self.scoreN1())
        self.actionN2.triggered.connect(lambda: self.scoreN2())
        self.actionN3.triggered.connect(lambda: self.scoreN3())
        self.actionWake.triggered.connect(lambda: self.scoreWake())
        self.actionREM.triggered.connect(lambda: self.scoreREM())
        self.actionLabelArtefacts.triggered.connect(lambda: self.labelArtefact())
        #self.actionRemoveArtefacts.triggered.connect(lambda: self.removeArtefact())











        # Developer mode
        if self.devmode == 1:
            scriptpath      = os.path.dirname(os.path.abspath(__file__))
            self.EEG.data   = scipy.io.loadmat(f'{scriptpath}\example_data\example_data.mat')['EEG']['data'][0][0]  
            self.open_config(f'{scriptpath}\example_data\example_data')
            self.initiate()

        # Makes GUI listen to key strokes
        MainWindow.keyPressEvent = self.keyPressEvent        

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.menuFile.setTitle(_translate("MainWindow", "File"))
        self.menuHelp.setTitle(_translate("MainWindow", "Help"))
        self.menuEdit.setTitle(_translate("MainWindow", "Edit"))
        self.menuView.setTitle(_translate("MainWindow", "View"))
        self.menuStages.setTitle(_translate("MainWindow", "Stages"))
        self.menuActions.setTitle(_translate("MainWindow", "Actions"))

        #self.EEG.textfield.setText(_translate("MainWindow", f'Epoch 1: -           '))  
        self.actionOpen.setText(_translate("MainWindow", "Open EEG file"))
        self.actionOpen.setShortcut(_translate("MainWindow", "Ctrl+O"))
        self.actionSave.setText(_translate("MainWindow", "Save your work"))
        self.actionSave.setShortcut(_translate("MainWindow", "Ctrl+S"))
        self.actionAbout.setText(_translate("MainWindow", "About"))
        self.actionChannels.setText(_translate("MainWindow", "Channels"))
        self.actionChannels.setShortcut(_translate("MainWindow", "Ctrl+C"))
        self.actionHypnogram.setText(_translate("MainWindow", "Hypnogram"))
        self.actionHypnogram.setShortcut(_translate("MainWindow", "Ctrl+H"))
        self.actionSpectogram.setText(_translate("MainWindow", "Spectogram"))
        self.actionSpectogram.setShortcut(_translate("MainWindow", "Ctrl+P"))
        self.actionN1.setText(_translate("MainWindow", "N1"))
        self.actionN1.setShortcut(_translate("MainWindow", "1"))
        self.actionN2.setText(_translate("MainWindow", "N2"))
        self.actionN2.setShortcut(_translate("MainWindow", "2"))
        self.actionN3.setText(_translate("MainWindow", "N3"))
        self.actionN3.setShortcut(_translate("MainWindow", "3"))
        self.actionWake.setText(_translate("MainWindow", "Wake"))
        self.actionWake.setShortcut(_translate("MainWindow", "W"))
        self.actionREM.setText(_translate("MainWindow", "REM"))
        self.actionREM.setShortcut(_translate("MainWindow", "R"))
        self.actionLabelArtefacts.setText(_translate("MainWindow", "Label artefacts"))
        self.actionLabelArtefacts.setShortcut(_translate("MainWindow", "A"))  # Add this line for the shortcut
        #self.actionRemoveArtefacts.setText(_translate("MainWindow", "Remove labeled artefacts"))
        #self.actionRemoveArtefacts.setShortcut(_translate("MainWindow", "Ctrl+A"))  # Add this line for the shortcut
        self.actionLoadWork.setText(_translate("MainWindow", "Load previous work"))
        self.actionLoadWork.setShortcut(_translate("MainWindow", "Ctrl+Shift+O"))  # Add this line for the shortcut
        self.actionAnnotations.setText(_translate("MainWindow", "Edit annotations"))
        self.actionAnnotations.setShortcut(_translate("MainWindow", "Ctrl+E"))  # Add this line for the shortcut


if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.activateWindow()  # Add this line to make the window active
    MainWindow.show()
    sys.exit(app.exec_())
