# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'qtdesigner_test.ui'
#
# Created by: PyQt5 UI code generator 5.15.9
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

from PyQt5 import QtCore, QtWidgets, QtGui
from PyQt5.QtWidgets import *
from PyQt5.QtCore import *
import scipy.io, os, sys, json, re, h5py
import tkinter as tk 
import numpy as np
sys.path.append("ui_classes")
sys.path.append("functions")
from EEG_class import *
from greenLine import *
from hypnogram import *
import io_functions
import popups, spectral


class Ui_MainWindow(QMainWindow):
    def __init__(self):
        super().__init__()
        self.devmode            = 1
        self.epolen             = 30
        self.this_epoch         = 1
        self.this_stage         = '-'
        self.savename           = []
        self.path_script        = os.path.dirname(os.path.abspath(__file__))
        self.path_expdata       = os.path.join(self.path_script, 'example_data')
        self.path_savefile      = os.path.join(self.path_script, 'example_data')
        self.artefacts          = popups.container(self.epolen, facecolor=(255, 200, 200, 100), label="Artefacts")
        self.containerF1        = popups.container(self.epolen, facecolor=(100, 149, 237, 100), label="Annotation_F1")
        self.containerF2        = popups.container(self.epolen, facecolor=(152, 251, 152, 100), label="Annotation_F2")
        self.containerF3        = popups.container(self.epolen, facecolor=(255, 255, 102, 100), label="Annotation_F3")
        self.containerF4        = popups.container(self.epolen, facecolor=(64, 224, 208, 100),  label="Annotation_F4")
        self.containers         = [self.artefacts, self.containerF1, self.containerF2, self.containerF3, self.containerF4]
        self.notes_editbox      = popups.editbox(self.containers)
        self.notes_editbox.changesMade.connect(self.edit_annotations)


        


        """ self.editfield = QtWidgets.QLineEdit()
        self.editfield.setFixedWidth(150)        
        self.editfield.setText("Default Text")
        self.editfield.returnPressed.connect(self.handleLineEdit)  
        self.editfieldAction = self.editfield.addAction(QLineEdit.TrailingPosition) 
        self.editfieldAction.triggered.connect(self.handleLineEdit)
        self.menuBar().addAction(self.editfieldAction) """           

    def keyPressEvent(self, event):
        print(event.key())
        if event.key() == Qt.Key_Right:
            self.nextEpoch()     
        if event.key() == Qt.Key_Left:
            self.previousEpoch()      
        if event.key() == Qt.Key_F1:            
            self.containerF1.include(self.greenLine)
            self.quick_save()    
        if event.key() == Qt.Key_F2:            
            self.containerF2.include(self.greenLine)
            self.quick_save()    
        if event.key() == Qt.Key_F3:            
            self.containerF3.include(self.greenLine)
            self.quick_save()    
        if event.key() == Qt.Key_F4:            
            self.containerF4.include(self.greenLine)
            self.quick_save()       


    def quick_save(self): 
        if len(self.savename) > 0:
            io_functions.write_json(self.savename, self.epolen, self.hypnogram, self.artefacts, self.containers)
                                               
    def scoring_load(self):
        scoring_file, _     = QtWidgets.QFileDialog.getOpenFileName(None, 'Open .json file', self.path_expdata, 'Json Files (*.json)')
        self.savename       = scoring_file
        self.path_expdata   = os.path.dirname(scoring_file)
        io_functions.load_your_work(self.hypnogram, self.containers, scoring_file)
        self.show_artefacts()                                                                                        
        self.refresh()

    def options(self):
        self.optionbox.exec_()

    def edit_displayed_eeg(self):
        self.EEG.edit_extension(self.this_epoch, self.optionbox)

    def edit_annotations(self):
        self.notes_editbox.exec_()
        for count, container in enumerate(self.containers):
            container.label = self.notes_editbox.labelbox[count].text()
            #palette = self.notes_editbox.labelbox[count].palette().color(QtGui.QPalette.Base)
            #annotation.facecolor = palette.red(), palette.green(), palette.blue(), 100  

    def remove_areas(self):
        1
        #for annotation in self.containers:
        #    annotation.remove_border(self.EEG)
                    
    def label_artefacts(self):
        #self.EEG.storeArtefacts(self.greenLine)  
        self.artefacts.include(self.greenLine)
        self.hypnogram.show_artefacts(self.artefacts.epoch)
        self.quick_save()          

    def show_artefacts(self):
        for annotation in self.containers:
            annotation.show_areas(self.EEG)

    def saveSleepStages(self):
        filename, _      = QFileDialog.getSaveFileName(None, "Save Sleep Stages", "", "Json Files (*.json)") # Open a file dialog to choose the save location and filename
        self.savename    = filename
        self.quick_save()

    def resetGreenLine(self):
        if self.greenLine:
            self.greenLine.reset()       
        
    def refresh(self):
        this_stage = self.hypnogram.stages[self.this_epoch-1]['Stage']
        this_epoch = self.this_epoch
        self.EEG.update_text(this_epoch, this_stage)
        self.spectogram.add_line(this_epoch)
        self.hypnogram.update(this_epoch)
        self.hypnogram.add_to_spectogram(this_epoch, self.spectogram.axes, self.containers)
        self.hypnogram.show_artefacts(self.artefacts.epoch)
        self.quick_save()
        self.resetGreenLine()          # Removes the greenLine widget


   

    def scoreN1(self):     
        self.hypnogram.assign(self.this_epoch, self.hypnogram.N1)
        self.refresh()   
        self.nextEpoch()

    def scoreN2(self):     
        self.hypnogram.assign(self.this_epoch, self.hypnogram.N2)
        self.refresh() 
        self.nextEpoch()

    def scoreN3(self):     
        self.hypnogram.assign(self.this_epoch, self.hypnogram.N3)
        self.refresh() 
        self.nextEpoch()

    def scoreWake(self):     
        self.hypnogram.assign(self.this_epoch, self.hypnogram.W)
        self.refresh() 
        self.nextEpoch()

    def scoreREM(self):     
        self.hypnogram.assign(self.this_epoch, self.hypnogram.REM)
        self.refresh()        
        self.nextEpoch()       

    def hypnoClick(self, event):
        self.this_epoch = self.hypnogram.onclick(event)
        self.EEG.showEEG(self.this_epoch)
        self.refresh()

    def spectogramClick(self, event):
        self.this_epoch = self.spectogram.map(event)
        self.EEG.showEEG(self.this_epoch)
        self.refresh()            

    def previousEpoch(self):
        if self.this_epoch > 1:
            self.this_epoch -= 1
            self.EEG.showEEG(self.this_epoch) # Plot previous epoch   
            self.refresh() 

    def nextEpoch(self):
        if self.this_epoch < self.EEG.numepo:
            self.this_epoch += 1       
            self.EEG.showEEG(self.this_epoch) # Plot next epoch
            self.refresh() 

    def scaleChannels(self):
        self.scaleDialogeBox = popups.scaleDialogeBox(self.EEG.chaninfo)
        self.scaleDialogeBox.changesMade.connect(self.respond_to_scaleDialogeBox)
        self.scaleDialogeBox.exec_()

    def respond_to_scaleDialogeBox(self):
        self.EEG.scaleChannels(self.scaleDialogeBox.chaninfo, self.this_epoch) 

    def openEEGFile(self):
        # Function to call when loading the EEG file.
        EEG_file, _ = QtWidgets.QFileDialog.getOpenFileName(None, 'Open File', self.path_expdata, '*.mat;*json')
        self.path_expdata           = os.path.dirname(EEG_file)
        EEG_filename, EEG_extension = os.path.splitext(EEG_file)
        if EEG_extension == '.mat':
            if scipy.io.matlab.miobase.get_matfile_version(EEG_file)[0] == 2: #v7.3 files
                with h5py.File(EEG_file, "r") as file:
                    self.EEG.data = file['EEG']['data'][:]
                    if self.EEG.data.shape[0] > self.EEG.data.shape[1]: # dimensions are weird ....
                        self.EEG.data = self.EEG.data.T
            else:
                self.EEG.data = scipy.io.loadmat(EEG_file)['EEG']['data'][0][0]
            # self.EEG.srate = scipy.io.loadmat(EEG_file)['EEG']['srate'][0][0][0][0] 
        self.savename = f'{EEG_filename}.json'
        io_functions.open_config(f'{EEG_filename}.config', self.EEG)
        self.initiate()

            


            
    def initiate(self):
        self.EEG.update(self.epolen)
        self.EEG.showEEG(self.this_epoch)
        self.hypnogram.initiate(self.EEG)
        self.spectogram.initiate(self.EEG)
        self.spectogram.add_line(self.this_epoch)
        self.EEG.update_text(self.this_epoch, self.this_stage)
        #self.epochpower.initiate(self.EEG)
        #self.epochpower.update(self.this_epoch)
        self.powerbox.initiate(self.EEG)
        self.greenLine.initiate(self.EEG)
        self.EEG.changesMade.connect(self.show_artefacts)

        for annotation in self.containers:
            annotation.changesMade.connect(self.remove_areas)        
        self.optionbox = popups.options(self.EEG.return_extension())
        self.optionbox.changesMade.connect(self.edit_displayed_eeg)            


    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(800, 600)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        MainWindow.showMaximized()

        # set the grid layout
        layout = QtWidgets.QGridLayout()
        self.centralwidget.setLayout(layout) 

        # Create classes
        self.EEG        = EEG_class(self.centralwidget)
        self.hypnogram  = hypnogram(self.centralwidget)
        self.spectogram = spectral.spectogram(self.centralwidget)
        self.powerbox   = spectral.powerbox(self.centralwidget)
        self.greenLine  = greenLine(self.powerbox)
        self.hypnogram.axes.scene().sigMouseClicked.connect(self.hypnoClick)
        self.spectogram.graphics.scene().sigMouseClicked.connect(self.spectogramClick)

        # Layout
        layout.addWidget(self.EEG.axes,                 10, 0,  85,  100)
        layout.addWidget(self.greenLine,                10, 0,  85,  100)     
        layout.addWidget(self.spectogram.graphics,      0,  0,  10,  70)
        layout.addWidget(self.hypnogram.axes,           0, 85,  10,  15)
        layout.addWidget(self.powerbox.axes,           0, 70,  10,  15)
        #layout.addWidget(self.epochpower.axes,          95, 0,  5, 100)

   




        # Menubar
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 800, 22))
        self.menubar.setObjectName("menubar")

        self.menuFile = QtWidgets.QMenu(self.menubar)
        self.menuFile.setObjectName("menuFile")
        self.menuHelp = QtWidgets.QMenu(self.menubar)
        self.menuHelp.setObjectName("menuHelp")
        self.menuEdit = QtWidgets.QMenu(self.menubar)
        self.menuEdit.setObjectName("menuEdit")
        #self.menuView = QtWidgets.QMenu(self.menubar)
        #self.menuView.setObjectName("menuView")
        self.menuStages = QtWidgets.QMenu(self.menubar)
        self.menuStages.setObjectName("menuStages")
        #self.menuActions = QtWidgets.QMenu(self.menubar)
        #self.menuActions.setObjectName("menuActions")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        self.actionOpen = QtWidgets.QAction(MainWindow)
        self.actionOpen.setObjectName("actionOpen")
        self.actionscoring_load = QtWidgets.QAction(MainWindow)
        self.actionscoring_load.setObjectName("actionscoring_load")
        self.actionSave = QtWidgets.QAction(MainWindow)
        self.actionSave.setObjectName("actionSave")
        self.actionChannels = QtWidgets.QAction(MainWindow)
        self.actionChannels.setObjectName("actionChannels")
        self.actionAnnotations = QtWidgets.QAction(MainWindow)
        self.actionAnnotations.setObjectName("actionAnnotations")
        self.actionEEG = QtWidgets.QAction(MainWindow)
        self.actionEEG.setObjectName("actionEEG")        
        self.actionAbout = QtWidgets.QAction(MainWindow)
        self.actionAbout.setObjectName("actionAbout")
        self.actionHypnogram = QtWidgets.QAction(MainWindow)
        self.actionHypnogram.setObjectName("actionHypnogram")
        self.actionSpectogram = QtWidgets.QAction(MainWindow)
        self.actionSpectogram.setObjectName("actionSpectogram")
        self.actionN1 = QtWidgets.QAction(MainWindow)
        self.actionN1.setObjectName("actionN1")
        self.actionN2 = QtWidgets.QAction(MainWindow)
        self.actionN2.setObjectName("actionN2")
        self.actionN3 = QtWidgets.QAction(MainWindow)
        self.actionN3.setObjectName("actionN3")
        self.actionWake = QtWidgets.QAction(MainWindow)
        self.actionWake.setObjectName("actionWake")
        self.actionREM = QtWidgets.QAction(MainWindow)
        self.actionREM.setObjectName("actionREM")
        self.actionLabelArtefacts = QtWidgets.QAction(MainWindow)
        self.actionLabelArtefacts.setObjectName("actionLabelArtefacts")
        #self.actionRemoveArtefacts = QtWidgets.QAction(MainWindow)
        #self.actionRemoveArtefacts.setObjectName("actionRemoveArtefacts")

        self.menuFile.addAction(self.actionOpen)
        self.menuFile.addAction(self.actionscoring_load)
        self.menuFile.addAction(self.actionSave)
        self.menuHelp.addAction(self.actionAbout)
        self.menuEdit.addAction(self.actionChannels)
        self.menuEdit.addAction(self.actionAnnotations)
        self.menuEdit.addAction(self.actionEEG)
        self.menuEdit.addSeparator()
        #self.menuView.addAction(self.actionHypnogram)
        #self.menuView.addAction(self.actionSpectogram)
        #self.menuView.addSeparator()
        self.menuStages.addAction(self.actionWake)
        self.menuStages.addAction(self.actionN1)
        self.menuStages.addAction(self.actionN2)
        self.menuStages.addAction(self.actionN3)
        self.menuStages.addAction(self.actionREM)
        self.menuStages.addAction(self.actionLabelArtefacts)
        #self.menuActions.addAction(self.actionRemoveArtefacts)

        self.menubar.addAction(self.menuFile.menuAction())
        self.menubar.addAction(self.menuEdit.menuAction())
        self.menubar.addAction(self.menuStages.menuAction())
        #self.menubar.addAction(self.menuView.menuAction())
        self.menubar.addAction(self.menuHelp.menuAction())
        #self.menubar.addAction(self.menuActions.menuAction())

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

        self.actionOpen.triggered.connect(lambda: self.openEEGFile())
        self.actionscoring_load.triggered.connect(lambda: self.scoring_load())
        self.actionSave.triggered.connect(lambda: self.saveSleepStages())
        self.actionChannels.triggered.connect(lambda: self.scaleChannels())
        self.actionAnnotations.triggered.connect(lambda: self.edit_annotations())
        self.actionEEG.triggered.connect(lambda: self.options())
        self.actionAbout.triggered.connect(lambda: self.aboutDialog())
        #self.actionHypnogram.triggered.connect(lambda: self.showHypnogram())
        #self.actionSpectogram.triggered.connect(lambda: self.showSpectogram())
        self.actionN1.triggered.connect(lambda: self.scoreN1())
        self.actionN2.triggered.connect(lambda: self.scoreN2())
        self.actionN3.triggered.connect(lambda: self.scoreN3())
        self.actionWake.triggered.connect(lambda: self.scoreWake())
        self.actionREM.triggered.connect(lambda: self.scoreREM())
        self.actionLabelArtefacts.triggered.connect(lambda: self.label_artefacts())
        #self.actionRemoveArtefacts.triggered.connect(lambda: self.removeArtefact())











        # Developer mode
        if self.devmode == 1:
            scriptpath      = os.path.dirname(os.path.abspath(__file__))
            self.EEG.data   = scipy.io.loadmat(f'{scriptpath}\example_data\example_data.mat')['EEG']['data'][0][0]  
            io_functions.open_config(f'{scriptpath}\example_data\example_data.config', self.EEG)
            self.initiate()

        # Makes GUI listen to key strokes
        MainWindow.keyPressEvent = self.keyPressEvent        

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.menuFile.setTitle(_translate("MainWindow", "File"))
        self.menuHelp.setTitle(_translate("MainWindow", "Help"))
        self.menuEdit.setTitle(_translate("MainWindow", "Edit"))
        #self.menuView.setTitle(_translate("MainWindow", "View"))
        self.menuStages.setTitle(_translate("MainWindow", "Stages"))
        #self.menuActions.setTitle(_translate("MainWindow", "Actions"))

        #self.EEG.textfield.setText(_translate("MainWindow", f'Epoch 1: -           '))  
        self.actionOpen.setText(_translate("MainWindow", "Open EEG file"))
        self.actionOpen.setShortcut(_translate("MainWindow", "Ctrl+O"))
        self.actionSave.setText(_translate("MainWindow", "Save your work"))
        self.actionSave.setShortcut(_translate("MainWindow", "Ctrl+S"))
        self.actionAbout.setText(_translate("MainWindow", "About"))
        self.actionChannels.setText(_translate("MainWindow", "Edit displayed channels"))
        self.actionChannels.setShortcut(_translate("MainWindow", "Ctrl+C"))
        self.actionEEG.setText(_translate("MainWindow", "Other options"))
        self.actionEEG.setShortcut(_translate("MainWindow", "Ctrl+P"))        
        self.actionHypnogram.setText(_translate("MainWindow", "Hypnogram"))
        self.actionHypnogram.setShortcut(_translate("MainWindow", "Ctrl+H"))
        self.actionSpectogram.setText(_translate("MainWindow", "Spectogram"))
        self.actionSpectogram.setShortcut(_translate("MainWindow", "Ctrl+P"))
        self.actionN1.setText(_translate("MainWindow", "N1"))
        self.actionN1.setShortcut(_translate("MainWindow", "1"))
        self.actionN2.setText(_translate("MainWindow", "N2"))
        self.actionN2.setShortcut(_translate("MainWindow", "2"))
        self.actionN3.setText(_translate("MainWindow", "N3"))
        self.actionN3.setShortcut(_translate("MainWindow", "3"))
        self.actionWake.setText(_translate("MainWindow", "Wake"))
        self.actionWake.setShortcut(_translate("MainWindow", "W"))
        self.actionREM.setText(_translate("MainWindow", "REM"))
        self.actionREM.setShortcut(_translate("MainWindow", "R"))
        self.actionLabelArtefacts.setText(_translate("MainWindow", "Label artefacts"))
        self.actionLabelArtefacts.setShortcut(_translate("MainWindow", "A"))  # Add this line for the shortcut
        #self.actionRemoveArtefacts.setText(_translate("MainWindow", "Remove labeled artefacts"))
        #self.actionRemoveArtefacts.setShortcut(_translate("MainWindow", "Ctrl+A"))  # Add this line for the shortcut
        self.actionscoring_load.setText(_translate("MainWindow", "Load previous work"))
        self.actionscoring_load.setShortcut(_translate("MainWindow", "Ctrl+Shift+O"))  # Add this line for the shortcut
        self.actionAnnotations.setText(_translate("MainWindow", "Edit annotations"))
        self.actionAnnotations.setShortcut(_translate("MainWindow", "Ctrl+E"))  # Add this line for the shortcut


if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.activateWindow()  # Add this line to make the window active
    MainWindow.show()
    sys.exit(app.exec_())
